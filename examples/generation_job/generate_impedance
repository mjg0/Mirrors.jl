#!/usr/bin/env julia

# Generate and write an impedance matrix file given an existing mirror file.

# TODO: I think the threaded slowness has to do with false sharing--the interpolation maybe
#       needs to be copied to each thread, or maybe it can go on the stack somehow

using Mirrors

include("parser.jl")



function main(args=ARGS)
    # Parse
    argdict = parser(args, efield=false,
                     description="Read a `Mirror` from `infile`, generate the " *
                                 "corresponding impedance matrix, and write it to " *
                                 "`outfile`.",
                     epilog="Checkpointing occurs automatically--given the same output " *
                            "file name, it can be interrupted and restarted an arbitrary " *
                            "amount of times and still successfully generate `outfile`. " *
                            "Checkpoint files are cleaned up automatically")
    mirror = Mirror(filename("mirror", argdict, false))
    # Generate impedance
    Z = impedance(mirror)
    # Write impedance
    write(filename("impedance", argdict, false), Z)
end



if abspath(PROGRAM_FILE) == @__FILE__
    main()
end



# TODO: figure out how to force threads never to yield so I can just spawn them all at once
